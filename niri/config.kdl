// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.

spawn-at-startup "swaybg" "-i" "/home/ibro/Pictures/bg.png"
spawn-at-startup "xremap" "/home/ibro/.config/xremap/config.yml"
spawn-at-startup "ags2" "-i" "niri"
spawn-at-startup "udiskie" "&"
spawn-at-startup "iwgtk" "-i"
spawn-at-startup "/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1"
spawn-at-startup "swayidle"
spawn-at-startup "xwayland-satellite" ":11"
spawn-at-startup "udiskie" "-sna"

workspace "main"
workspace "research"
workspace "burner"
workspace "config"
workspace "LAB"
workspace "media"

input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            layout "us"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
        }

        // You can set the keyboard repeat parameters. The defaults match wlroots and sway.
        // Delay is in milliseconds before the repeat Sstarts. Rate is in characters per second.
        repeat-delay 300
        repeat-rate 50

        // Niri can remember the keyboard layout globally (the default) or per-window.
        // - "global" - layout change is global for all windows.
        // - "window" - layout is tracked for each window individually.
        // track-layout "global"
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        tap
        // dwt
        // dwtp
        natural-scroll
        accel-speed 0.5
        accel-profile "adaptive"
        // tap-button-map "left-middle-right"
    }

    mouse {
        // natural-scroll
        accel-speed 0.5
        accel-profile "adaptive"
    }

    tablet {
        // Set the name of the output (see below) which the tablet will map to.
        // If this is unset or the output doesn't exist, the tablet maps to one of the
        // existing outputs.
        map-to-output "eDP-1"
    }

    // By default, niri will take over the power button to make it sleep
    // instead of power off.
    // Uncomment this if you would like to configure the power button elsewhere
    // (i.e. logind.conf).
    // disable-power-key-handling
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Remember to uncommend the node by removing "/-"!
output "eDP-1" {
    // Uncomment this line to disable this output.
    // off

    // Scale is a floating-point number, but at the moment only integer values work.
    scale 1.0

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "1920x1080@240"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.
    // position x=1280 y=0
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some rounded corners.
prefer-no-csd

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decoratins can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
       off

        // How many logical pixels the ring extends out from the windows.
        width 2

        // Color of the ring on the active monitor: red, green, blue, alpha.

		// #070238 #080137

        // active-color "#6356F4"
        // inactive-color "#ff0000"
		// active-gradient from="#7A7168" to="#080137" angle=135 relative-to="workspace-view"
				
	    // Color of the ring on inactive monitors: red, green, blue, alpha.
				
	}
			
	// You can also add a border. It's similar to the focus ring, but always visible.
	border {
		// The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        // off

        width 1
        // active-color 127 200 255 255
        // inactive-color 80 80 80 255
		active-gradient from="#f5c2e7" to="#89DCEB" angle=135 relative-to="workspace-view"
		inactive-gradient from="#7A7168" to="#080137" angle=135 relative-to="workspace-view"
    }
    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can change the default width of the new windows.
    // default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    default-column-width {proportion 0.45; }

    // Set gaps around windows in logical pixels.
    gaps 0

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        left 8
        right 8
        top 0
        bottom 0
    }

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    // - "always", the focused column will always be centered.
    center-focused-column "never"
}


cursor {
    // Change the theme and size of the cursor as well as set the
    // `XCURSOR_THEME` and `XCURSOR_SIZE` env variables.
    xcursor-theme "Bibata-Modern"
    xcursor-size 28
}

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    slowdown 0.83
		workspace-switch {
			spring damping-ratio=0.85 stiffness=400 epsilon=0.0001
		}
	
		horizontal-view-movement {
				spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
		}
	
		/* 
		window-movement {
			spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
		}
		*/
	
		window-open {
				duration-ms 150
				curve "ease-out-expo"
		}
	
		config-notification-open-close {
				spring damping-ratio=0.6 stiffness=1000 epsilon=0.001
		}
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules
window-rule {
    draw-border-with-background false
	geometry-corner-radius 0
	clip-to-geometry true
}

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}
window-rule {
    match app-id=r#"^brave-$"#
    default-column-width { fixed 450;}
}


/-window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}
window-rule {
    match app-id="^blender$"

    // GIMP app ID contains the version like "gimp-2.99",
    // so we only match the beginning (with ^) and not the end.
    match app-id="^gimp"

    default-column-width { proportion 0.8; }
}

// Settings for the "Important Hotkeys" overlay.
hotkey-overlay {
    // Uncomment this line if you don't want to see the hotkey help at niri startup.
    skip-at-startup
}

binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.

    // Mod-Shift-/, which is usually the same as Mod-?,
    // shows a list of important hotkeys.
    Mod+Shift+Slash { show-hotkey-overlay; }

    Mod+Alt+1 {set-column-width "33%";}
    Mod+Alt+2 {set-column-width "45%";}
    Mod+Alt+3 {set-column-width "53%";}
    Mod+Alt+4 {set-column-width "75%";}
    Mod+Alt+5 {set-column-width "90%";}

    // Suggested bnds for running programs: terminal, app launcher, screen locker.
    // Mod+T { spawn "wezterm"; }
    Mod+Return { spawn "wezterm"; }
    Mod+B { spawn "zen-browser"; }
    Mod+E { spawn "dolphin"; }
    Mod+C { spawn "code"; }
    Mod+Space { spawn "bash" "-c" "ags2 -i niri -t launcher"; }
    // Mod { spawn "bash" "-c" "ags2 -i niri -t poplauncher"; }
    Mod+Alt+Space { spawn "bash" "-c" "ags2 -i niri -t launcher"; }
    Mod+Escape { spawn "swaylock"; }
    Mod+R {spawn "bash" "-c" "ags2 -i niri -q && ags2 -i niri";}
    // You can also use a shell:
    // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }

    // Media Keys
    XF86AudioRaiseVolume cooldown-ms=5 { spawn "bash" "-c" "ags2 -i niri -m 'audio.setVolume(.05)'"; }
    XF86AudioLowerVolume  { spawn "bash" "-c" "ags2 -i niri -m 'audio.setVolume(-.05)'"; }
    XF86AudioMute         { spawn "bash" "-c" "ags2 -i niri -m 'audio.toggleMute()'"; }
    
    XF86MonBrightnessUp   { spawn "bash" "-c" "ags2 -i niri -m 'brightness.set(.05)'"; }
    XF86MonBrightnessDown { spawn "bash" "-c" "ags2 -i niri -m 'brightness.set(-.05)'"; }
    
    XF86AudioPlay  { spawn "bash" "-c" "ags2 -i niri -m 'mpris.playPause()'" ; }
    XF86AudioPause { spawn "bash" "-c" "ags2 -i niri -m 'mpris.playPause()'"; }
    XF86AudioStop  { spawn "bash" "-c" "ags2 -i niri -m 'mpris.stop()'"; }
    XF86AudioPrev  { spawn "bash" "-c" "ags2 -i niri -m 'mpris.previous()'"; }
    XF86AudioNext  { spawn "bash" "-c" "ags2 -i niri -m 'mpris.next()'"; }

    Mod+Q { close-window; }

    // Focus
    Mod+Left           { focus-column-left; }
    Mod+Right          { focus-column-right; }
    Mod+Up             { focus-window-or-workspace-up; }
    Mod+Down           { focus-window-or-workspace-down; }
    Mod+H              { focus-column-left; }
    Mod+M              { focus-column-left; }
    Mod+L              { focus-column-right; }
    Mod+K              { focus-window-or-workspace-up; }
    Mod+J              { focus-window-or-workspace-down; }
    Mod+Home           { focus-column-first; }
    Mod+End            { focus-column-last; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+Page_Down      { focus-workspace-down; }

    // Move
    Mod+Shift+Left  { move-column-left; }
    Mod+Shift+Right { move-column-right; }
    Mod+Shift+Up    { move-window-up; }
    Mod+Shift+Down  { move-window-down; }
    Mod+Shift+K     { move-window-up; }
    Mod+Shift+J     { move-window-down; }

    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+L     { move-column-right; }
    Mod+Ctrl+K     { move-column-to-workspace-up; }
    Mod+Ctrl+J     { move-column-to-workspace-down; }
    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+Up    { move-column-to-workspace-up; }
    Mod+Ctrl+Down  { move-column-to-workspace-down; }

    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+D         { move-workspace-down; }
    Mod+Shift+U         { move-workspace-up; }

    // Multi Monitor
    // Mod+Shift+Left  { focus-monitor-left; }
    // Mod+Shift+Down  { focus-monitor-down; }
    // Mod+Shift+Up    { focus-monitor-up; }
    // Mod+Shift+Right { focus-monitor-right; }
    // Mod+Shift+H     { focus-monitor-left; }
    // Mod+Shift+J     { focus-monitor-down; }
    // Mod+Shift+K     { focus-monitor-up; }
    // Mod+Shift+L     { focus-monitor-right; }
    // Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    // Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    // Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    // Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    // Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    // Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    // Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    // Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }
    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }

    // Resize

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Minus       { set-column-width "-2%"; }
    Mod+Equal       { set-column-width "+2%"; }
    Mod+Alt+Minus   { set-column-width "-8%"; }
    Mod+Alt+Equal   { set-column-width "+8%"; }
    Mod+ALt+Left    { set-column-width "-2%"; }
    Mod+Alt+Right   { set-column-width "+2%"; }
    Mod+ALt+H       { set-column-width "-2%"; }
    Mod+Alt+L       { set-column-width "+2%"; }
    // When in multi-window column
    Mod+Shift+Minus { set-window-height "-2%"; }
    Mod+Shift+Equal { set-window-height "+2%"; }
    Mod+Alt+Up      { set-window-height "-2%"; }
    Mod+Alt+Down    { set-window-height "+2%"; }
    Mod+Alt+K       { set-window-height "-2%"; }
    Mod+Alt+J       { set-window-height "+2%"; }


    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Similarly, you can bind touchpad scroll "ticks".
    // Touchpad scrolling is continuous, so for these binds it is split into
    // discrete intervals.
    // These binds are also affected by touchpad's natural-scroll, so these
    // example binds are "inverted", since we have natural-scroll enabled for
    // touchpads by default.
    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    Mod+Tab { focus-workspace-previous; }

    Mod+Comma  { consume-window-into-column; }
    // Mod+Period { expel-window-from-column; }
    Mod+Period { spawn "bash" "-c" "expel-column"; }
    // Mod+Period { spawn "bash" "-c" "expel-column"; }
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // There are also commands that consume or expel a single window to the side.
    // Mod+BracketLeft  { consume-or-expel-window-left; }
    // Mod+BracketRight { consume-or-expel-window-right; }

    // Mod+R { switch-preset-column-width; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+Shift+C { center-column; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    Mod+Shift+E { quit; }
    Mod+Shift+P { power-off-monitors; }

    Mod+Shift+Ctrl+T { toggle-debug-tint; }
}

environment {
	// Set a variable like this:
	QT_QPA_PLATFORM "wayland"
	QT_QPA_PLATFORMTHEME "qt6ct"
	QT_ENABLE_HIGHDPI_SCALING "1"
	
	// brings back default applications in dolphin
	XDG_MENU_PREFIX "arch-"
	// Remove a variable by using null as the value:
	// DISPLAY null
}

// Settings for debugging. Not meant for normal use.
// These can change or stop working at any point with little notice.
debug {
    // Make niri take over its DBus services even if it's not running as a session.
    // Useful for testing screen recording changes without having to relogin.
    // The main niri instance will *not* currently take back the services; so you will
    // need to relogin in the end.
    // dbus-interfaces-in-non-session-instances

    // Wait until every frame is done rendering before handing it over to DRM.
    // wait-for-frame-completion-before-queueing

    // Enable direct scanout into overlay planes.
    // May cause frame drops during some animations on some hardware.
    // enable-overlay-planes

    // Disable the use of the cursor plane.
    // The cursor will be rendered together with the rest of the frame.
    // disable-cursor-plane

    // Slow down animations by this factor.
    // animation-slowdown 3.0

    // Override the DRM device that niri will use for all rendering.
    // render-drm-device "/dev/dri/renderD129"//renderD129" //129 = Intel; 128 = Nvidia
}
